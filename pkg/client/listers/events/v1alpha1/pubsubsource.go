/*
Copyright 2019 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/GoogleCloudPlatform/cloud-run-events/pkg/apis/events/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PubSubSourceLister helps list PubSubSources.
type PubSubSourceLister interface {
	// List lists all PubSubSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PubSubSource, err error)
	// PubSubSources returns an object that can list and get PubSubSources.
	PubSubSources(namespace string) PubSubSourceNamespaceLister
	PubSubSourceListerExpansion
}

// pubSubSourceLister implements the PubSubSourceLister interface.
type pubSubSourceLister struct {
	indexer cache.Indexer
}

// NewPubSubSourceLister returns a new PubSubSourceLister.
func NewPubSubSourceLister(indexer cache.Indexer) PubSubSourceLister {
	return &pubSubSourceLister{indexer: indexer}
}

// List lists all PubSubSources in the indexer.
func (s *pubSubSourceLister) List(selector labels.Selector) (ret []*v1alpha1.PubSubSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PubSubSource))
	})
	return ret, err
}

// PubSubSources returns an object that can list and get PubSubSources.
func (s *pubSubSourceLister) PubSubSources(namespace string) PubSubSourceNamespaceLister {
	return pubSubSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PubSubSourceNamespaceLister helps list and get PubSubSources.
type PubSubSourceNamespaceLister interface {
	// List lists all PubSubSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PubSubSource, err error)
	// Get retrieves the PubSubSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PubSubSource, error)
	PubSubSourceNamespaceListerExpansion
}

// pubSubSourceNamespaceLister implements the PubSubSourceNamespaceLister
// interface.
type pubSubSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PubSubSources in the indexer for a given namespace.
func (s pubSubSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PubSubSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PubSubSource))
	})
	return ret, err
}

// Get retrieves the PubSubSource from the indexer for a given namespace and name.
func (s pubSubSourceNamespaceLister) Get(name string) (*v1alpha1.PubSubSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pubsubsource"), name)
	}
	return obj.(*v1alpha1.PubSubSource), nil
}
